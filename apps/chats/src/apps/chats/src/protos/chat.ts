// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: apps/chats/src/protos/chat.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "chat";

export enum MessageStatus {
  SENT = 0,
  DELIVERED = 1,
  FAILED = 2,
  UNRECOGNIZED = -1,
}

export interface MessageRequest {
  userId: string;
  groupId?: string | undefined;
  content: string;
  timestamp: string;
}

export interface MessageResponse {
  userId: string;
  content: string;
  timestamp: string;
  error?: string | undefined;
  status: MessageStatus;
}

export interface MessageHistoryRequest {
  groupId: string;
  limit: number;
}

export interface MessageHistoryResponse {
  messages: MessageResponse[];
}

export const CHAT_PACKAGE_NAME = "chat";

export interface ChatServiceClient {
  sendMessage(request: MessageRequest): Observable<MessageResponse>;

  /** Receive messages in real-time using bidirectional streaming */

  chatStream(request: Observable<MessageRequest>): Observable<MessageResponse>;

  getMessagesHistory(request: MessageHistoryRequest): Observable<MessageHistoryResponse>;
}

export interface ChatServiceController {
  sendMessage(request: MessageRequest): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  /** Receive messages in real-time using bidirectional streaming */

  chatStream(request: Observable<MessageRequest>): Observable<MessageResponse>;

  getMessagesHistory(
    request: MessageHistoryRequest,
  ): Promise<MessageHistoryResponse> | Observable<MessageHistoryResponse> | MessageHistoryResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendMessage", "getMessagesHistory"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["chatStream"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";
